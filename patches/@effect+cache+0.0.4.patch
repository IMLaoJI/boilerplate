diff --git a/node_modules/@effect/cache/Cache/_internal/CacheInternal.d.ts b/node_modules/@effect/cache/Cache/_internal/CacheInternal.d.ts
index 9dba4bf..140d4c2 100644
--- a/node_modules/@effect/cache/Cache/_internal/CacheInternal.d.ts
+++ b/node_modules/@effect/cache/Cache/_internal/CacheInternal.d.ts
@@ -7,7 +7,6 @@ import { Service } from "@tsplus/stdlib/service/Service";
 import { FiberId } from "@effect/core/io/FiberId/definition";
 import { Effect } from "@effect/core/io/Effect/definition";
 import { Chunk } from "@tsplus/stdlib/collections/Chunk/definition";
-import { Tuple } from "@tsplus/stdlib/data/Tuple/definition";
 import { CacheStats } from "@effect/cache/CacheStats/definition";
 import { Maybe } from "@tsplus/stdlib/data/Maybe/definition";
 import { EntryStats } from "@effect/cache/EntryStats/definition";
@@ -30,7 +29,7 @@ export declare class CacheInternal<Key, Environment, Error, Value> implements Ca
     private cacheState;
     constructor(capacity: number, lookup: Lookup<Key, Environment, Error, Value>, timeToLive: (exit: Exit<Error, Value>) => Duration, clock: Clock, environment: Service.Env<Environment>, fiberId: FiberId);
     get size(): Effect<never, never, number>;
-    get entries(): Effect<never, never, Chunk<Tuple<[Key, Value]>>>;
+    get entries(): Effect<never, never, Chunk<readonly [Key, Value]>>;
     get values(): Effect<never, never, Chunk<Value>>;
     get cacheStats(): Effect<never, never, CacheStats>;
     entryStats(k: Key): Effect<never, never, Maybe<EntryStats>>;
diff --git a/node_modules/@effect/cache/Cache/_internal/CacheInternal.js b/node_modules/@effect/cache/Cache/_internal/CacheInternal.js
index d9a378d..3fc71fb 100644
--- a/node_modules/@effect/cache/Cache/_internal/CacheInternal.js
+++ b/node_modules/@effect/cache/Cache/_internal/CacheInternal.js
@@ -10,8 +10,6 @@ var tsplus_module_1 = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require
 
 var tsplus_module_2 = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/core/io/Effect/operations/sync"));
 
-var tsplus_module_3 = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@tsplus/stdlib/data/Tuple/make"));
-
 var tsplus_module_4 = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@tsplus/stdlib/collections/Chunk/definition"));
 
 var tsplus_module_5 = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/cache/CacheStats/definition"));
@@ -89,11 +87,9 @@ class CacheInternal {
     return tsplus_module_2.sync(() => {
       const entries = [];
 
-      for (const {
-        tuple: [key, value]
-      } of this.cacheState.map) {
+      for (const [key, value] of this.cacheState.map) {
         if (value._tag === "Complete" && value.exit._tag === "Success") {
-          entries.push(tsplus_module_3.make(key, value.exit.value));
+          entries.push([key, value.exit.value]);
         }
       }
 
@@ -105,9 +101,7 @@ class CacheInternal {
     return tsplus_module_2.sync(() => {
       const values = [];
 
-      for (const {
-        tuple: [_, value]
-      } of this.cacheState.map) {
+      for (const [_, value] of this.cacheState.map) {
         if (value._tag === "Complete" && value.exit._tag === "Success") {
           values.push(value.exit.value);
         }
diff --git a/node_modules/@effect/cache/_mjs/Cache/_internal/CacheInternal.mjs b/node_modules/@effect/cache/_mjs/Cache/_internal/CacheInternal.mjs
index a68b98c..549ffed 100644
--- a/node_modules/@effect/cache/_mjs/Cache/_internal/CacheInternal.mjs
+++ b/node_modules/@effect/cache/_mjs/Cache/_internal/CacheInternal.mjs
@@ -2,7 +2,6 @@ var _a;
 
 import * as tsplus_module_1 from "@effect/cache/Cache/_internal/CacheState";
 import * as tsplus_module_2 from "@effect/core/io/Effect/operations/sync";
-import * as tsplus_module_3 from "@tsplus/stdlib/data/Tuple/make";
 import * as tsplus_module_4 from "@tsplus/stdlib/collections/Chunk/definition";
 import * as tsplus_module_5 from "@effect/cache/CacheStats/definition";
 import * as tsplus_module_6 from "@effect/core/io/Effect/operations/succeed";
@@ -52,11 +51,11 @@ export class CacheInternal {
     return tsplus_module_2.sync(() => {
       const entries = [];
 
-      for (const {
-        tuple: [key, value]
-      } of this.cacheState.map) {
+      for (const 
+        [key, value]
+       of this.cacheState.map) {
         if (value._tag === "Complete" && value.exit._tag === "Success") {
-          entries.push(tsplus_module_3.make(key, value.exit.value));
+          entries.push([key, value.exit.value]);
         }
       }
 
@@ -68,9 +67,9 @@ export class CacheInternal {
     return tsplus_module_2.sync(() => {
       const values = [];
 
-      for (const {
-        tuple: [_, value]
-      } of this.cacheState.map) {
+      for (const 
+        [_, value]
+       of this.cacheState.map) {
         if (value._tag === "Complete" && value.exit._tag === "Success") {
           values.push(value.exit.value);
         }
